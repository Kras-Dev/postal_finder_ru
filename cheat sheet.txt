 python -m venv venv

. venv/Scripts/activate

Команда pip freeze > requirements.txt используется в Python для создания файла requirements.txt,
который содержит список всех установленных пакетов и их версий в вашем виртуальном окружении.

Позже, чтобы установить все зависимости из файла requirements.txt, вы можете использовать команду:
pip install -r requirements.txt

Установка и интеграция Alembic с SQLAlchemy
1. Установка: pip install alembic
2. Инициализация: alembic init alembic - Это создаст каталог alembic с необходимыми конфигурационными файлами.
В корневой директории, указанной при выполнении команды alembic init, будут созданы следующие файлы:

- alembic.ini: Это основной конфигурационный файл Alembic. Он содержит настройки подключения к базе данных и другие
параметры, такие как путь к директории миграций. В этом файле вы можете настроить различные параметры, включая URL
подключения к вашей базе данных.

- env.py: Этот файл содержит код, который выполняется при запуске миграций. Он настраивает контекст для выполнения
миграций и может включать дополнительные настройки или импорты, необходимые для вашей модели базы данных.

- script.py.mako является ШАБЛОНОМ для создания новых файлов миграций. Когда вы выполняете команду alembic revision,
Alembic использует этот файл для генерации кода миграции. Внутри этого файла вы найдете код, который определяет функции
upgrade() и downgrade(), которые используются для применения и отката миграций соответственно.

- README: Обычно это файл с кратким описанием того, как использовать Alembic в вашем проекте. Здесь могут быть указаны
основные команды и примеры использования.

3. Настройка: Откройте alembic.ini. Вы увидите строку: sqlalchemy.url = driver://user:pass@localhost/dbname
Замените эту строку на URL вашей базы данных, с которой работает ваше приложение на SQLAlchemy.
Или Создайте файл, например, run_alembic.py, который будет выполнять команды Alembic с динамическими параметрами.

4. Настройка env.py: В файле alembic/env.py добавьте код для импорта вашей базы данных и моделей.
from your_app.models.sqlalchemy_models import Base  # Импортируйте вашу базу
target_metadata = Base.metadata # Добавим метаданные вашей базы

5. Создание миграций: С помощью Alembic вы создаете миграции, которые отражают изменения в схеме базы данных. Например:
alembic revision --autogenerate -m "<message>" # Эта команда создаст новую миграцию с отражением изменений в схеме.
- Это нужно делать каждый раз, когда вы изменяете свои модели и хотите сохранить эти изменения в виде миграции.

6. Применение миграций: Чтобы применить миграции к вашей базе данных, используйте:
alembic upgrade head
или Запустите run_alembic.py, чтобы применить все доступные миграции:
   python alembic/run_alembic.py

7. Откат миграции: Чтобы откатить последнюю миграцию, выполните: alembic downgrade -1

8. Основные команды
alembic init <directory>: Инициализация нового репозитория Alembic.
alembic revision -m "<сообщение>": Создание новой миграции.
alembic upgrade <revision>: Применение миграций.
alembic downgrade <revision>: Откат миграции.
alembic history: Просмотр истории всех миграций.
alembic current: Показать текущую версию базы данных.
alembic branches: Эта команда покажет вам текущие ветки миграций в вашем проекте.
